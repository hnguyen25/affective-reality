{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Affective Reality About Affective reality is a Stanford BCI project which seeks to use biometric data to recognize one's emotional and focused state, and then use this to inform a virtual reality environment--whether that be a meditation app whose environment and soundscape changes depending on mood and relaxation, or an education app that monitors focus to increase learning outcomes. The end goal is to create a closed loop, bi-directional system wherein one's mental states influences the VR environment, and conversely, the VR environment influences one's mental state. Github Repo Link","title":"Introduction"},{"location":"#affective-reality","text":"","title":"Affective Reality"},{"location":"#about","text":"Affective reality is a Stanford BCI project which seeks to use biometric data to recognize one's emotional and focused state, and then use this to inform a virtual reality environment--whether that be a meditation app whose environment and soundscape changes depending on mood and relaxation, or an education app that monitors focus to increase learning outcomes. The end goal is to create a closed loop, bi-directional system wherein one's mental states influences the VR environment, and conversely, the VR environment influences one's mental state.","title":"About"},{"location":"#github-repo","text":"Link","title":"Github Repo"},{"location":"about/","text":"","title":"About"},{"location":"data/","text":"The data module contains all methods which loads and pre-processes all forms of biometric data from their original format into a form which can be used by the machine learning algorithms. The forms of data which are currently being handled are: Public datasets: such as the DEAP dataset and the DREAMER dataset Experimental data collected from OpenBCI headsets by the project team Dataloaders These functions load data from their raw files and converts them to a shared format (a multi-dimensional NumPy array) for easy manipulation. There are separate dataloader classes for each type of data. Each dataloader class has the following functions: test test test More detailed documentation is provided below. LOAD_PUBLIC_DATASETS Huy Nguyen (2021) Used to load cleaned EEG data from publicly available datasets, such as the DEAP and DREAMER datasets, into a common data format. DEAPDataloader Used to load data obtained from the DEAP public dataset. Examples: get_dataset_info ( self , filepath ) Parameters: Name Type Description Default filepath str path to DREAMER file (must be in .mat format) required Returns: Type Description dict dictionary with important info about dataset load_data ( self , filepath , num_subjects =- 1 , num_trials =- 1 , choose_randomly = False ) Parameters: Name Type Description Default filepath str path to DREAMER file (must be in .mat format) required num_subjects int if not -1, choose the number of participants from the dataset to pull data from; cannot exceed total number of participants as specified in get_dataset_info() -1 num_trials int if not -1, choose the number of trials for each participant to pull data from; cannot exceed total number of trials done in experiments as specified in get_dataset_info() -1 choose_randomly bool if num_subjects is not -1, then randomly choose subjects whose data will be loaded. False Returns: Type Description numpy.array loaded data in a shared data format load_raw_data ( self , filepath ) Parameters: Name Type Description Default filepath str path to DREAMER file (must be in .mat format) required Returns: Type Description numpy.array raw data file loaded into python DreamerDataloader Used to load data obtained from the DREAMER public dataset. Examples: get_dataset_info ( self , filepath ) Parameters: Name Type Description Default filepath str path to DREAMER file (must be in .mat format) required Returns: Type Description dict dictionary with important info about dataset load_data ( self , filepath , num_subjects =- 1 , num_trials =- 1 , choose_randomly = False ) Parameters: Name Type Description Default filepath str path to DREAMER file (must be in .mat format) required num_subjects int if not -1, choose the number of participants from the dataset to pull data from; cannot exceed total number of participants as specified in get_dataset_info() -1 num_trials int if not -1, choose the number of trials for each participant to pull data from; cannot exceed total number of trials done in experiments as specified in get_dataset_info() -1 choose_randomly bool if num_subjects is not -1, then randomly choose subjects whose data will be loaded. False Returns: Type Description numpy.array loaded data in a shared data format load_raw_data ( self , filepath ) Parameters: Name Type Description Default filepath str path to DREAMER file (must be in .mat format) required Returns: Type Description numpy.array raw data file loaded into python Data Preprocessing PREPROCESSING Huy Nguyen (2021) These functions takes the data obtained from the dataloaders module and pre-processes it into a form which can be easily plugged into a classification algorithm. basenorm_data ( data , baseline ) Parameters: Name Type Description Default data required baseline required create_topomap ( data , cmap , image_width = 200 ) Parameters: Name Type Description Default data required cmap required image_width 200 normalize_data ( data , normalize_mean = True , normalize_variance = True ) Parameters: Name Type Description Default data required normalize_mean True normalize_variance True spatialize_data ( data , eeg_matrix ) Parameters: Name Type Description Default data required eeg_matrix required window_data ( data , window_len = 8000 ) Parameters: Name Type Description Default data required window_len 8000","title":"Data"},{"location":"data/#dataloaders","text":"These functions load data from their raw files and converts them to a shared format (a multi-dimensional NumPy array) for easy manipulation. There are separate dataloader classes for each type of data. Each dataloader class has the following functions: test test test More detailed documentation is provided below. LOAD_PUBLIC_DATASETS Huy Nguyen (2021) Used to load cleaned EEG data from publicly available datasets, such as the DEAP and DREAMER datasets, into a common data format.","title":"Dataloaders"},{"location":"data/#emotion-classification.src.data.load_public_datasets.DEAPDataloader","text":"Used to load data obtained from the DEAP public dataset. Examples:","title":"DEAPDataloader"},{"location":"data/#emotion-classification.src.data.load_public_datasets.DEAPDataloader.get_dataset_info","text":"Parameters: Name Type Description Default filepath str path to DREAMER file (must be in .mat format) required Returns: Type Description dict dictionary with important info about dataset","title":"get_dataset_info()"},{"location":"data/#emotion-classification.src.data.load_public_datasets.DEAPDataloader.load_data","text":"Parameters: Name Type Description Default filepath str path to DREAMER file (must be in .mat format) required num_subjects int if not -1, choose the number of participants from the dataset to pull data from; cannot exceed total number of participants as specified in get_dataset_info() -1 num_trials int if not -1, choose the number of trials for each participant to pull data from; cannot exceed total number of trials done in experiments as specified in get_dataset_info() -1 choose_randomly bool if num_subjects is not -1, then randomly choose subjects whose data will be loaded. False Returns: Type Description numpy.array loaded data in a shared data format","title":"load_data()"},{"location":"data/#emotion-classification.src.data.load_public_datasets.DEAPDataloader.load_raw_data","text":"Parameters: Name Type Description Default filepath str path to DREAMER file (must be in .mat format) required Returns: Type Description numpy.array raw data file loaded into python","title":"load_raw_data()"},{"location":"data/#emotion-classification.src.data.load_public_datasets.DreamerDataloader","text":"Used to load data obtained from the DREAMER public dataset. Examples:","title":"DreamerDataloader"},{"location":"data/#emotion-classification.src.data.load_public_datasets.DreamerDataloader.get_dataset_info","text":"Parameters: Name Type Description Default filepath str path to DREAMER file (must be in .mat format) required Returns: Type Description dict dictionary with important info about dataset","title":"get_dataset_info()"},{"location":"data/#emotion-classification.src.data.load_public_datasets.DreamerDataloader.load_data","text":"Parameters: Name Type Description Default filepath str path to DREAMER file (must be in .mat format) required num_subjects int if not -1, choose the number of participants from the dataset to pull data from; cannot exceed total number of participants as specified in get_dataset_info() -1 num_trials int if not -1, choose the number of trials for each participant to pull data from; cannot exceed total number of trials done in experiments as specified in get_dataset_info() -1 choose_randomly bool if num_subjects is not -1, then randomly choose subjects whose data will be loaded. False Returns: Type Description numpy.array loaded data in a shared data format","title":"load_data()"},{"location":"data/#emotion-classification.src.data.load_public_datasets.DreamerDataloader.load_raw_data","text":"Parameters: Name Type Description Default filepath str path to DREAMER file (must be in .mat format) required Returns: Type Description numpy.array raw data file loaded into python","title":"load_raw_data()"},{"location":"data/#data-preprocessing","text":"PREPROCESSING Huy Nguyen (2021) These functions takes the data obtained from the dataloaders module and pre-processes it into a form which can be easily plugged into a classification algorithm.","title":"Data Preprocessing"},{"location":"data/#emotion-classification.src.data.preprocessing.basenorm_data","text":"Parameters: Name Type Description Default data required baseline required","title":"basenorm_data()"},{"location":"data/#emotion-classification.src.data.preprocessing.create_topomap","text":"Parameters: Name Type Description Default data required cmap required image_width 200","title":"create_topomap()"},{"location":"data/#emotion-classification.src.data.preprocessing.normalize_data","text":"Parameters: Name Type Description Default data required normalize_mean True normalize_variance True","title":"normalize_data()"},{"location":"data/#emotion-classification.src.data.preprocessing.spatialize_data","text":"Parameters: Name Type Description Default data required eeg_matrix required","title":"spatialize_data()"},{"location":"data/#emotion-classification.src.data.preprocessing.window_data","text":"Parameters: Name Type Description Default data required window_len 8000","title":"window_data()"},{"location":"emotion-classification/","text":"","title":"Emotion Classification"},{"location":"emotion-experiments/","text":"","title":"Emotion Experiments"},{"location":"features/","text":"The features module contains all the methods which performs signal processing and calculates useful signal features on the data, in order to increase the accuracy and effectiveness of the machine learning algorithms. Huy Nguyen (2021) Methods to decompose data into the 5 common frequency bands typical in EEG analysis. get_frequncy_bands ( data ) Parameters: Name Type Description Default data required SIGNAL STATISTICS Huy Nguyen (2021) TOPOMAP_UPSAMPLING Huy Nguyen (2021)","title":"Features"},{"location":"features/#emotion-classification.src.features.frequency_bands.get_frequncy_bands","text":"Parameters: Name Type Description Default data required SIGNAL STATISTICS Huy Nguyen (2021) TOPOMAP_UPSAMPLING Huy Nguyen (2021)","title":"get_frequncy_bands()"},{"location":"getting-started/","text":"","title":"Getting Started"},{"location":"home/","text":"Documentation for Print print print! Examples: method_a ( self , param1 , param2 ) Example function Parameters: Name Type Description Default param1 int test param required param2 str test param2 required Returns: Type Description bool the return value method_b ( self ) Print B! method_c ( self ) Print C!","title":"My page"},{"location":"home/#documentation-for","text":"Print print print! Examples:","title":"Documentation for"},{"location":"home/#emotion-classification.src.test.TestClass.method_a","text":"Example function Parameters: Name Type Description Default param1 int test param required param2 str test param2 required Returns: Type Description bool the return value","title":"method_a()"},{"location":"home/#emotion-classification.src.test.TestClass.method_b","text":"Print B!","title":"method_b()"},{"location":"home/#emotion-classification.src.test.TestClass.method_c","text":"Print C!","title":"method_c()"},{"location":"models/","text":"The models module contains the code for the machine learning models implementation for emotion classification using EEG data. BASELINES David Toomer (2021), Huy Nguyen (2021) CNN Huy Nguyen (2021) All models which uses a convolutional neural network as its base. RNN (2021) Huy Nguyen All models which uses a recurrent neural network as its base. COMPOSITE Huy Nguyen (2021) All deep learning models which uses a composition of different architectures.","title":"Models"},{"location":"modules/","text":"","title":"Modules"},{"location":"user-api/","text":"","title":"User api"},{"location":"viz/","text":"The visualization module contains the code for visualizing EEG data, as well as metrics for evaluating the success of the ML algorithms.","title":"Visualization"},{"location":"vr-app/","text":"","title":"Real-Time Application"}]}